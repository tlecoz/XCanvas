import { MouseControler } from '../controlers/MouseControler';
import { Matrix2D } from '../geom/Matrix2D';
import { Pt2D } from '../geom/Pt2D';
import { Rectangle2D } from '../geom/Rectangle2D';
import { Path } from '../graphics/Path';
import { BitmapCache } from './BitmapCache';
import { Group2D } from './Group2D';
import { RenderStack, RenderStackable } from './RenderStack';
import { RenderStackElement } from './RenderStackElement';
import { Stage2D } from './Stage2D';

export type FillType = string | CanvasGradient | CanvasPattern;
export declare class Display2D extends Matrix2D {
    static MOUSE_OVER: string;
    static MOUSE_OUT: string;
    static CLICK: string;
    static ADDED: string;
    static REMOVED: string;
    static ADDED_TO_STAGE: string;
    static REMOVED_FROM_STAGE: string;
    private static display2dIndex;
    static pathManager: Path;
    protected cache: BitmapCache;
    protected _stage: Stage2D | null;
    protected _cacheAsBitmap: boolean;
    renderStack: RenderStack;
    width: number;
    height: number;
    alpha: number;
    inverseW: number;
    inverseH: number;
    protected mouse: MouseControler | null;
    mouseIsOver: boolean;
    mouseEnabled: boolean;
    useBasicHitTest: boolean;
    parent: Group2D | null;
    protected render: (e?: any) => void | null;
    currentTransform: DOMMatrix | null;
    protected _bounds: Rectangle2D;
    private _display2dName;
    protected boundFrameId: number;
    protected waitingBound: boolean;
    constructor(w: number, h: number, renderStack?: RenderStack);
    get dataString(): string;
    static fromDataString(data: string, target?: Display2D): Display2D;
    get fillStrokeDrawable(): boolean;
    get display2dName(): string;
    get useComplexHitTest(): boolean;
    setStage(stage: Stage2D | null): void;
    get stage(): Stage2D | null;
    align(displayAlign?: Pt2D): void;
    updateBounds(): Rectangle2D;
    stack(renderStackElement: RenderStackable): RenderStackElement;
    get cacheAsBitmap(): boolean;
    set cacheAsBitmap(b: boolean);
    get bitmapCache(): BitmapCache;
    get bounds(): Rectangle2D;
    get globalAlpha(): number;
    get globalX(): number;
    get globalY(): number;
    get globalScaleX(): number;
    get globalScaleY(): number;
    get globalRotation(): number;
    onMouseOver(): void;
    onMouseOut(): void;
    resetBoundsOffsets(): void;
    update(context: CanvasRenderingContext2D): void;
}
